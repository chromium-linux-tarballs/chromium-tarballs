name: Chromium Tarball Generation

# Workflow triggers on tag pushes or manual dispatch
on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: Tag to run the workflow for
        required: true

jobs:
  generate-tarball:
    runs-on: ubuntu-latest
    outputs:
      # Pass annotation subject and channel to other jobs
      annotation: ${{ steps.get_release_info.outputs.annotation }}
      channel: ${{ steps.get_release_info.outputs.channel }}

    steps:
      - name: Free up space on the runner
        run: |
          echo ">>> Freeing up disk space"
          echo "Before:"
          df -m .
          sudo rm -rf \
            /usr/local/.ghcup \
            /usr/local/lib/android \
            /usr/local/share/powershell \
            /usr/share/dotnet \
            /usr/share/swift \
            "$AGENT_TOOLSDIRECTORY"
          echo "After:"
          df -m .
          echo ">>> Space freed"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history needed for tag annotations

      - name: Configure Git
        run: |
          git config --global user.name "Chromium Bot"
          git config --global user.email "chromium@gentoo.org"
          git config --global advice.detachedHead false

      - name: Get release info
        id: get_release_info
        # The fetch is necessary to get the full tag annotation, even with fetch-depth=0
        run: |
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
          tag_subject=$(git tag -l --format='%(contents:subject)' "${{ inputs.version || github.ref_name }}")
          echo "annotation=${tag_subject}" >> ${GITHUB_OUTPUT}
          release_channel=$(echo "${tag_subject}" | awk '{ print $3 }')
          echo "channel=${release_channel}" >> ${GITHUB_OUTPUT}
          echo "Detected Tag Subject: ${tag_subject}"
          echo "Detected Channel: ${release_channel}"


      - name: Package Chromium tarballs for ${{ inputs.version || github.ref_name }}
        run: |
          ./package_chromium.sh "${{ inputs.version || github.ref_name }}"
          # Check if expected directories exist after packaging
          test -d `src/third_party/llvm`     || echo '* NOTE: Failed to download LLVM components (`src/third_party/llvm` missing)' >> $GITHUB_STEP_SUMMARY
          test -d `src/third_party/rust-src` || echo '* NOTE: Failed to download Rust components (`src/third_party/rust-src` missing)' >> $GITHUB_STEP_SUMMARY

      - name: Archive build artefacts
        # Upload artefacts for use in subsequent jobs (S3 upload, GitHub Release)
        uses: actions/upload-artifact@v4
        with:
            name: build-artefacts
            path: out/chromium*.tar.xz*
            compression-level: 0 # Tarballs are already compressed
            retention-days: 5

      # Using pinned commit hash for IRC action as preferred for security/stability.
      - name: Notify success (Generation)
        if: success()
        uses: Gottox/irc-message-action@5ab60c2121053c99a383753390fb169a0045694d # v2.1.5
        with:
          server: irc.libera.chat
          notice: false
          channel: "#gentoo-chromium"
          nickname: chromium-notifs
          message: "✅ Successfully generated Chromium tarballs for ${{ inputs.version || github.ref_name }} (${{ steps.get_release_info.outputs.channel }})"

      - name: Notify failure (Generation)
        if: failure() || cancelled()
        uses: Gottox/irc-message-action@5ab60c2121053c99a383753390fb169a0045694d # v2.1.5
        with:
          server: irc.libera.chat
          notice: false
          channel: "#gentoo-chromium"
          nickname: chromium-notifs
          message: "❌ Failed to generate Chromium tarballs for ${{ inputs.version || github.ref_name }} (${{ steps.get_release_info.outputs.channel }})"

  # Create GitHub Release and upload artefacts directly to it.
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [generate-tarball]

    steps:
      - name: Download build artefacts
        uses: actions/download-artifact@v4
        with:
          name: build-artefacts

      - name: List downloaded artefacts
        run: ls -l chromium*.tar.xz*

      - name: Create Release and Upload Artefacts
        id: create_release
        uses: ncipollo/release-action@440c8c1cb0ed28b9f43e4d1d670870f059653174 # v1.16.0
        with:
          # Attach files matching this pattern from the workspace to the release
          artifacts: "chromium*.tar.xz*"
          artifactErrorsFailBuild: true # Fail the workflow if artefact upload fails
          replacesArtifacts: true # If tag/release exists, replace assets
          allowUpdates: true # Allow modifying existing releases for the same tag
          # Mark as pre-release if the channel is not 'stable'
          prerelease: ${{ needs.generate-tarball.outputs.channel != 'stable' }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ inputs.version || github.ref_name }}
          name: ${{ needs.generate-tarball.outputs.annotation }}
          body: |
            **Artefacts are attached directly to this GitHub release.**
      - name: Notify success (Release)
        if: success()
        uses: Gottox/irc-message-action@5ab60c2121053c99a383753390fb169a0045694d # v2.1.5
        with:
          server: irc.libera.chat
          notice: false
          channel: "#gentoo-chromium"
          nickname: chromium-notifs
          message: "✅ Successfully created GH release for Chromium tarballs @ ${{ inputs.version || github.ref_name }} ${{ needs.generate-tarball.outputs.channel && format('({0})', needs.generate-tarball.outputs.channel)}}"

      - name: Notify failure (Release)
        if: failure() || cancelled()
        uses: Gottox/irc-message-action@5ab60c2121053c99a383753390fb169a0045694d # v2.1.5
        with:
          server: irc.libera.chat
          notice: false
          channel: "#gentoo-chromium"
          nickname: chromium-notifs
          message: "❌ Failed to create (or update) GH release for Chromium tarballs @ ${{ inputs.version || github.ref_name }} ${{ needs.generate-tarball.outputs.channel && format('({0})', needs.generate-tarball.outputs.channel)}}"
